##Module: Analysispolicies = ["RM", "DM", "EDF", "EDFNP"]def ceil(a, b):    if ((a % b) == 0):        return a/b    else:        return (a/b) + 1def utilization(taskSet):    u = 0.0    for ts in (taskSet):        u = u + float(ts[3])/float(ts[1])    return udef isRMAplicable(taskSet):    return Truedef WCRT(params, prio):    wcet = params[prio][3]   # tiempo de computo de la tarea en analisis    deadline = params[prio][2]   # plazo de la tarea en analisis    R = Rant = wcet    while (prio > 0):        inter = 0        for i in range(0, prio):            (tid, per, plazo, comp, u) = params[i]            inter += ceil(Rant , per) * comp        R = wcet +  inter        if (R == Rant):            break        if (R > deadline):            break        Rant = R    return Rdef exactTestDM(taskParams):    wrt = []    for i in range(len(taskParams)):        w = WCRT(taskParams, i);        wrt.append([taskParams[i][0], w])        if (w > taskParams[i][2]):            return (False, wrt)    return (True, wrt)def busyPeriod(params):    Rant = 0    for i in range(len(params)):        Rant = Rant + params[i][3]    # wcet    next = 0    while (next <= Rant):        next = 0        for i in range(len(params)):            next += ceil(Rant , params[i][1]) * params[i][3]        if (next == Rant):            break        Rant = next    return nextdef testEDF(taskParams):    Ut = utilization(taskParams)    if (Ut <= 1.0):        return True    else:        return Falsedef schedulabilityTest(policy, ncores, taskParams):    tparams = []    print "schedulabilityTest:", policy, ncores, taskParams    if ((policy == "RM")  and isRMAplicable(taskParams)):        stparams = sorted(taskParams, key=lambda params: params[1])        return exactTestDM(stparams)    elif (policy == "DM"):        stparams = sorted(taskParams, key=lambda params: params[2])        return exactTestDM(stparams)    elif (policy == "EDF"):        sched = testEDF(taskParams)        if (sched):            primerHueco = busyPeriod(taskParams)            return sched, primerHueco        else:            return sched    else:         return "No aplicable"         