##Module: Analysispolicies = ["RM", "DM", "EDF", "EDFNP"]def ceil(a, b):    if ((a % b) == 0):        return a/b    else:        return (a/b) + 1def isRMAplicable(taskSet):    #acompletar    return Truedef WCRT(taskList):# devuelve una lista de tiempos de respuesta de peor caso de las tareas# si hay n tareas, devolvera una lista de n elementos con los trespuesta    nTasks = len(taskList)    R = []    for i in range(nTasks):        R.append(0)    pWcet = 3    pPer = 1    # Para cada tarea    for i in range(nTasks):            #acompletar    return Rdef exactTestDM(ncores, taskParams):    params = []    wrt = []    if (ncores > 0):        for i in range(len(taskParams)):        	(tid, per, plazo, wcet, wx) = taskParams[i]        	params.append((tid, per * ncores, plazo * ncores, wcet, wx))    else:        return     for i in range(len(params)):        w = WCRT(params, i);        wrt.append(w)        if (wrt[i] > params[i][1]):            return (False, wrt)    return (True, wrt)def exactTestEDF(ncores, taskParams):    params = []    wrt = []    if (ncores > 1):        for i in range(len(taskParams)):        	(per, plazo, wcet, u) = taskParams[i]        	params.append((per * ncores, plazo * ncores, wcet, u))    for i in range(len(params)):            #acompletar        if (wrt[i] > params[i][1]):            return (False, wrt)    return (True, wrt)def schedulabilityTest(policy, ncores, taskParams):    tparams = []    print "schedulabilityTest:", policy, ncores, taskParams    if ((policy == "RM") or (policy == "DM")):        stparams = sorted(taskParams, key=lambda params: params[2])        return exactTestDM(ncores, stparams)            elif (policy == "EDF"):        return False    	 